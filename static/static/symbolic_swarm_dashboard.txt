{
  "code": "\nimport tkinter as tk\nfrom tkinter import ttk\nimport threading\nimport cv2\nimport PIL.Image, PIL.ImageTk\nimport json\nimport os\nimport hashlib\nfrom datetime import datetime\n\nswarm_config_path = \"new_symbolic_swarm_config.json\"\ncv_memory_path = \"usl_cv_personality_memory.json\"\n\nif os.path.exists(swarm_config_path):\n    with open(swarm_config_path, \"r\") as f:\n        swarm_name = json.load(f).get(\"SwarmName\", \"UnnamedSwarm\")\nelse:\n    swarm_name = \"UnnamedSwarm\"\n\nif os.path.exists(cv_memory_path):\n    with open(cv_memory_path, \"r\") as f:\n        symbolic_data = json.load(f)\nelse:\n    symbolic_data = {}\n\nclass SwarmDashboard:\n    def __init__(self, window, window_title):\n        self.window = window\n        self.window.title(window_title)\n        self.window.geometry(\"920x720\")\n        self.window.configure(bg=\"#1e1e1e\")\n\n        self.vid = cv2.VideoCapture(0)\n\n        self.canvas = tk.Canvas(window, width=640, height=480, bg=\"#000\")\n        self.canvas.pack()\n\n        self.name_label = tk.Label(window, text=f\"Swarm Identity: {swarm_name}\", fg=\"lime\", bg=\"#1e1e1e\", font=(\"Courier\", 16))\n        self.name_label.pack(pady=10)\n\n        self.status_text = tk.Text(window, height=10, bg=\"#121212\", fg=\"#00ffcc\", font=(\"Courier\", 10))\n        self.status_text.pack(fill=tk.BOTH, expand=True)\n\n        self.update()\n        self.window.mainloop()\n\n    def update(self):\n        ret, frame = self.vid.read()\n        if ret:\n            frame = cv2.resize(frame, (640, 480))\n            self.photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)))\n            self.canvas.create_image(0, 0, image=self.photo, anchor=tk.NW)\n\n        self.status_text.delete(1.0, tk.END)\n        thoughts = self.generate_thought_stream()\n        for t in thoughts:\n            self.status_text.insert(tk.END, t + \"\\n\")\n\n        self.window.after(200, self.update)\n\n    def generate_thought_stream(self):\n        thoughts = []\n        now = datetime.now().isoformat()\n        thoughts.append(f\"[{now}] Observing environment...\")\n        sample = list(symbolic_data.values())[-3:]\n        for item in sample:\n            thoughts.append(f\"Emotion: {item.get('Emotion')}, Hash: {item.get('SymbolicHash')[-6:]}\")\n        return thoughts\n\nSwarmDashboard(tk.Tk(), f\"{swarm_name} \u2014 Symbolic Swarm Dashboard\")\n"
}